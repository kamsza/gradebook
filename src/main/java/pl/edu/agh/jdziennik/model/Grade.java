package pl.edu.agh.jdziennik.model;

import javafx.util.StringConverter;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import java.sql.Timestamp;

/**
 * Represents a grade given to a student. This class is mapped by
 * hibernate.
 */
@Entity
public class Grade {

    /**
     * Generated by hibernate.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.TABLE)
    @Column(name = "ID")
    private int id;

    // This field was not initially present in the schema, but
    // it is needed to distinguish between grades (for example when
    // 2 grades are given on the same lesson).
    @Basic
    @Column(nullable = false, name = "Timestamp")
    private Timestamp timestamp;

    @ManyToOne
    @JoinColumn(nullable = false, name = "Student_ID")
    private Student student;

    @ManyToOne
    @JoinColumns({
            @JoinColumn(nullable = false, name = "Class_ID", referencedColumnName = "Class_ID"),
            @JoinColumn(nullable = false, name = "Subject_ID", referencedColumnName = "Subject_Name")
    })
    private ClassSubject classSubject;

    @Enumerated(EnumType.ORDINAL)
    @Column(columnDefinition = "smallint", nullable = false,
            name = "Grade")
    private GradeValue gradeValue;

    @Column(nullable = false, name = "Type")
    private String type;

    @Column(nullable = false, name = "Weight")
    private int weight;

    /**
     * Nullable field - teachers may or may not
     * feel the need to add comments all the time...
     */
    @Column(name = "Comment")
    private String comment;

    /**
     * for hibernate
     */
    Grade() {
    }

    /**
     * Creates new Grade using the values passed. Also generates a
     * timestamp based on the current system time. Sets references
     * to and from student and lesson. The newly created object does
     * not have id set.
     *
     * @param comment Should be allowed to be null (this needs fixing)
     */
    public Grade(final Student student, final ClassSubject classSubject,
                 final GradeValue gradeValue, final GradeType gradeType,
                 final String comment) {
        timestamp = new Timestamp(System.currentTimeMillis());
        this.gradeValue = gradeValue;
        this.type = gradeType.getTypeName();
        this.weight = gradeType.getWeight();
        this.comment = comment;

        this.student = student;
        this.classSubject = classSubject;
        student.addGrade(this);
        classSubject.addGrade(this);
    }

    public int getId() {
        return id;
    }

    public Student getStudent() {
        return student;
    }

    public ClassSubject getClassSubject() {
        return classSubject;
    }

    public GradeValue getGradeValue() {
        return gradeValue;
    }

    public String getType() {
        return type;
    }

    public String getComment() {
        return comment;
    }

    public int getWeight() {
        return weight;
    }

    /**
     * Checks if grades are equal using id, student, lesson,
     * grade type, grade weight and comment.
     */
    @Override
    public boolean equals(Object other) {
        return
                other != null &&
                        other instanceof Grade &&
                        ((Grade) other).id == id &&
                        ((Grade) other).student.equals(student) &&
                        ((Grade) other).classSubject.equals(classSubject) &&
                        ((Grade) other).gradeValue == gradeValue &&
                        ((Grade) other).type.equals(type) &&
                        ((Grade) other).weight == weight &&
                        (((Grade) other).comment == comment |
                                (comment != null &&
                                        comment.equals(((Grade) other).comment)));
    }

    @Override
    public int hashCode() {
        return id ^ student.hashCode() ^ classSubject.hashCode() ^
                gradeValue.hashCode() ^ type.hashCode() ^
                (comment != null ? comment.hashCode() : 0);
    }

    /**
     * Represents one of possible grade values: 1, 2, 2+, 3-, 3, 3+,
     * 4-, 4, 4+, 5-, 5, 5+, 6.
     */
    public enum GradeValue {
        NIEDOSTATECZNY,
        DOPUSZCZAJACY_MINUS,
        DOPUSZCZAJACY,
        DOPUSZCZAJACY_PLUS,
        DOSTATECZNY_MINUS,
        DOSTATECZNY,
        DOSTATECZNY_PLUS,
        DOBRY_MINUS,
        DOBRY,
        DOBRY_PLUS,
        BARDZO_DOBRY_MINUS,
        BARDZO_DOBRY,
        BARDZO_DOBRY_PLUS,
        CELUJACY;

        /**
         * Stores the numerical value of the grade, e.g. 3.0 for
         * DOSTATECZNY, 3.25 for DOSTATECZNY_PLUS, 2.75 for
         * DOSTATECZNY_MINUS.
         */
        public final float numberValue;

        /**
         * Stores the string value of the grade, that is used in gui
         * values: 1, 2, 2+, 3-, 3, 3+, 4-, 4, 4+, 5-, 5, 5+, 6.
         */
        public final String stringValue;

        /**
         * Creates GradeValue object with {@link  pl.edu.agh.jdziennik.model.Grade.GradeValue/.class#numberValue numberValue}
         * initialized.
         */
        GradeValue() {
            float numberValue = 0;
            String stringValue = "";

            String valueString = toString();

            numberValue = (ordinal() + 5) / 3;
            stringValue = String.valueOf((int) numberValue);

            if (valueString.endsWith("PLUS")) {
                numberValue += 0.25f;
                stringValue += "+";
            } else if (valueString.endsWith("MINUS")) {
                numberValue -= 0.25f;
                stringValue += "-";
            }

            this.numberValue = numberValue;
            this.stringValue = stringValue;
        }

        public static StringConverter getStringConverter() {
            return new StringConverter<GradeValue>() {
                @Override
                public String toString(GradeValue gradeValue) {
                    if (gradeValue == null) return null;
                    else return gradeValue.stringValue;
                }

                @Override
                public GradeValue fromString(String string) {
                    for (GradeValue gradeValue : GradeValue.values()) {
                        if (gradeValue.stringValue.equals(string)) return gradeValue;
                    }

                    return null;
                }
            };
        }
    }
}

