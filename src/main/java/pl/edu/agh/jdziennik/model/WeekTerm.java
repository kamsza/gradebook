package pl.edu.agh.jdziennik.model;

import javax.persistence.*;
import java.util.LinkedList;
import java.util.List;

/**
 * Represents a term in a week when a subject is taught to a class.
 * This class is mapped by hibernate.
 */
@Entity
public class WeekTerm {

    /**
     * Generated by hibernate.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.TABLE)
    @Column(name = "ID")
    private int id;
    @Enumerated
    @Column(columnDefinition = "smallint", nullable = false,
            name = "Day_ID")
    private Day day;
    @ManyToOne
    @JoinColumn(nullable = false, name = "TimeWindow_ID")
    private TimeWindow timeWindow;
    @ManyToOne
    @JoinColumns({
            @JoinColumn(nullable = false, name = "Class_ID",
                    referencedColumnName = "Class_ID"),
            @JoinColumn(nullable = false, name = "Subject_Name",
                    referencedColumnName = "Subject_Name")})
    private ClassSubject classSubject;
    @ManyToOne
    @JoinColumn(nullable = false, name = "Classroom_ID")
    private Classroom classroom;
    @OneToMany(mappedBy = "weekTerm")
    private List<Lesson> lessonList = new LinkedList<>();
    @OneToMany(mappedBy = "weekTerm")
    private List<Assignment> assignmentList = new LinkedList<>();

    /**
     * for hibernate
     */
    WeekTerm() {
    }

    /**
     * Creates new WeekTerm using the values passed. Sets references
     * to and from classSubject and classroom. The newly created
     * object does not have id set.
     */
    public WeekTerm(final Day day, final TimeWindow timeWindow,
                    final ClassSubject classSubject,
                    final Classroom classroom) {
        this.day = day;

        this.classSubject = classSubject;
        this.classroom = classroom;
        this.timeWindow = timeWindow;
        timeWindow.addWeekTerm(this);
        classSubject.addWeekTerm(this);
        classroom.addWeekTerm(this);
    }

    public int getId() {
        return id;
    }

    public Day getDay() {
        return day;
    }

    public TimeWindow getTimeWindow() {
        return timeWindow;
    }

    public ClassSubject getClassSubject() {
        return classSubject;
    }

    public Classroom getClassroom() {
        return classroom;
    }

    /**
     * Adds lesson to list of lessons that took place in this term.
     * Does not set the reference to weekTerm in lesson.
     */
    public void addLesson(Lesson lesson) {
        lessonList.add(lesson);
    }

    /**
     * Adds assignment to list of assignments due on that weekTerm.
     * Does not set the reference to weekTerm in assignment.
     */
    public void addAssignment(Assignment assignment) {
        assignmentList.add(assignment);
    }

    /**
     * Removes lesson from list of lessons that took place
     * in this term.
     */
    // TODO do we really need this? Aren't we going to just use
    // hibernate to delete lesson from db?
    public void removeLesson(Lesson lesson) {
        lessonList.remove(lesson);
    }

    public List<Lesson> getLessonList() {
        return this.lessonList;
    }

    /**
     * Changes classroom of the weekTerm to another one. Removes the
     * reference to weekTerm in old classroom. Adds a reference in
     * new classroom.
     */
    public void changeClassroom(Classroom newClassroom) {
        classroom.removeWeekTerm(this);
        classroom = newClassroom;
        newClassroom.addWeekTerm(this);
    }

    /**
     * Checks if weekTerms are equal using id, day, timeWindow
     * and classSubject.
     */
    @Override
    public boolean equals(Object other) {
        return
                other != null &&
                        other instanceof WeekTerm &&
                        ((WeekTerm) other).id == id &&
                        ((WeekTerm) other).day == day &&
                        ((WeekTerm) other).timeWindow.equals(timeWindow) &&
                        ((WeekTerm) other).classSubject.equals(classSubject);
    }

    @Override
    public int hashCode() {
        return day.hashCode() ^ timeWindow.hashCode() ^
            classSubject.hashCode() ^ id;
    }

    /**
     * Represents day of week.
     */
    public enum Day {
        PONIEDZIALEK,
        WTOREK,
        SRODA,
        CZWARTEK,
        PIATEK,
        SOBOTA,
        NIEDZIELA;

        /**
         * Stores the string short name of the day.
         * values: Pon, Wt, Sr, Czw, Pt, Sb, Nd.
         */
        public final String stringValue;

        /**
         * Creates Day object with {@link  pl.edu.agh.jdziennik.model.WeekTerm.Day#stringValue stringValue} initialized.
         */
        Day() {
            switch (ordinal()) {
            case 0:
                stringValue = "Pon"; break;
            case 1:
                stringValue = "Wt"; break;
            case 2:
                stringValue = "Sr"; break;
            case 3:
                stringValue = "Czw"; break;
            case 4:
                stringValue = "Pt"; break;
            case 5:
                stringValue = "Sb"; break;
            default: // case 6:
                stringValue = "Nd";
            }
        }
    }
}
